library(readr)
ebay_train_y <- read_csv("~/206/dmba/ebay_train_y.csv")
ebay_train_X <- read_csv("~/206/dmba/ebay_train_X.csv")
ebay_valid_y <- read_csv("~/206/dmba/ebay_valid_y.csv")
ebay_valid_X <- read_csv("~/206/dmba/ebay_valid_X.csv")
train.df <- cbind(ebay_train_y, ebay_train_X)
valid.df <- cbind(ebay_valid_y, ebay_valid_X)
View(train.df)
trainP <- train.df[,-Competitive]
trainP <- train.df[,!Competitive]
trainP <- train.df[,!Competitive?]
trainP <- train.df[,Competitive?]
trainP <- train.df[,'Competitive?']
trainP <- train.df[,!'Competitive?']
trainP <- train.df[,-'Competitive?']
trainP <- subset(train.df,select=-c(ClosePrice))
View(trainP)
y <- ebay_train_y$Competitive?
X <- data.matrix(ebay_train_X)
y <- ebay_train_y$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
y <- ebay_train_y$Competitive?
X <- model.matrix(Competitive? ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
y <- ebay_train_y$Competitive
y <- ebay_train_y$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
library(readr)
ebay_train_y <- read_csv("~/206/dmba/ebay_train_y.csv")
ebay_train_X <- read_csv("~/206/dmba/ebay_train_X.csv")
ebay_valid_y <- read_csv("~/206/dmba/ebay_valid_y.csv")
ebay_valid_X <- read_csv("~/206/dmba/ebay_valid_X.csv")
train.df <- cbind(ebay_train_y, ebay_train_X)
valid.df <- cbind(ebay_valid_y, ebay_valid_X)
y <- ebay_train_y$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
y <- train.df$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
y <- train.df$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
y <- train.df$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
y <- train.df$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
########################################################
#do this part to remove close price if you want to exclude it for realistic purposes
train.df <- subset(train.df,select=-c(ClosePrice))
train.df$Competitive?
y <- train.df$Competitive?
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
train.df$Competitive?
>
View(train.df)
train.df[Competitive?]
train.df[,Competitive?]
train.df[,Competitive]
train.df[,'Competitive']
train.df$`Competitive?`
y <- train.df$'Competitive?'
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive? ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
X <- model.matrix('Competitive?' ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive?~., train.df)[,-1] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive? ~., train.df)[,-1] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive? ~ ., train.df)[,-1] #remove intercept as glmnet will add intercept
ebay_train_y <- read_csv("~/206/dmba/ebay_train_y.csv")
ebay_train_X <- read_csv("~/206/dmba/ebay_train_X.csv")
ebay_valid_y <- read_csv("~/206/dmba/ebay_valid_y.csv")
ebay_valid_X <- read_csv("~/206/dmba/ebay_valid_X.csv")
train.df <- cbind(ebay_train_y, ebay_train_X)
valid.df <- cbind(ebay_valid_y, ebay_valid_X)
y <- train.df$'Competitive?'
y <- train.df$'Competitive'
X <- model.matrix(Competitive ~ ., train.df)[,-1] #remove intercept as glmnet will add intercept
library(glmnet)
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(model_logit)$coefficients, odds = exp(coef(model_logit)))
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
View(X)
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
summary(lm.fit)
a = summary(lm.fit)
b = exp(coef(lm.fit))
b
length(summary(lm.fit))
length(exp(coef(lm.fit)))
length(summary(lm.fit)$coefficients)
length(exp(coef(lm.fit)))
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
shape(summary(lm.fit)$coefficients)
size(summary(lm.fit)$coefficients)
length
length(summary(lm.fit)$coefficients)
length(exp(coef(lm.fit)))
View(X)
ebay_train_y <- read_csv("~/206/dmba/ebay_train_y.csv")
ebay_train_X <- read_csv("~/206/dmba/ebay_train_X.csv")
ebay_valid_y <- read_csv("~/206/dmba/ebay_valid_y.csv")
ebay_valid_X <- read_csv("~/206/dmba/ebay_valid_X.csv")
train.df <- cbind(ebay_train_y, ebay_train_X)
valid.df <- cbind(ebay_valid_y, ebay_valid_X)
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
library(readr)
ebay_train_y <- read_csv("~/206/dmba/ebay_train_y.csv")
ebay_train_X <- read_csv("~/206/dmba/ebay_train_X.csv")
ebay_valid_y <- read_csv("~/206/dmba/ebay_valid_y.csv")
ebay_valid_X <- read_csv("~/206/dmba/ebay_valid_X.csv")
train.df <- cbind(ebay_train_y, ebay_train_X)
valid.df <- cbind(ebay_valid_y, ebay_valid_X)
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
lm.fit
lenghth(lm.fit)
length(lm.fit)
length(summary(lm.fit))
length(summary(lm.fit)$coefficients)
summary(lm.fit)$coefficients
length(exp(coef(lm.fit)))
exp(coef(lm.fit))
train.df <- cbind(ebay_train_X, ebay_train_y)
valid.df <- cbind(ebay_valid_X, ebay_valid_y)
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
coef(lm.fit)
summary(lm.fit)$coefficients
View(train.df)
X <- model.matrix(Competitive ~ ., train.df)[,-1] #remove intercept as glmnet will add intercept
View(X)
View(ebay_train_X)
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive ~ ., train.df)[, -2] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
X <- model.matrix(Competitive ~ ., train.df)[, -2] #remove intercept as glmnet will add intercept
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
View(train.df)
########################################################
#do this part to remove close price if you want to exclude it for realistic purposes
train.df <- subset(train.df,select=-c(ClosePrice))
valid.df <- subset(valid.df,select=-c(ClosePrice))
y <- train.df$'Competitive'
X <- model.matrix(Competitive ~ ., train.df)[, -2] #remove intercept as glmnet will add intercept
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
exp(coef(lm.fit))
summary(lm.fit)$coefficients
View(train.df)
########################################################
#do this part to remove close price if you want to exclude it for realistic purposes
train.df <- subset(train.df,select=-c(ClosePrice,const))
train.df <- cbind(ebay_train_X, ebay_train_y)
valid.df <- cbind(ebay_valid_X, ebay_valid_y)
########################################################
#do this part to remove close price if you want to exclude it for realistic purposes
train.df <- subset(train.df,select=-c(ClosePrice,const))
valid.df <- subset(valid.df,select=-c(ClosePrice,const))
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
library(readr)
ebay_train_y <- read_csv("~/206/dmba/ebay_train_y.csv")
ebay_train_X <- read_csv("~/206/dmba/ebay_train_X.csv")
ebay_valid_y <- read_csv("~/206/dmba/ebay_valid_y.csv")
ebay_valid_X <- read_csv("~/206/dmba/ebay_valid_X.csv")
train.df <- cbind(ebay_train_X, ebay_train_y)
valid.df <- cbind(ebay_valid_X, ebay_valid_y)
########################################################
#do this part to remove close price if you want to exclude it for realistic purposes
train.df <- subset(train.df,select=-c(ClosePrice,const))
valid.df <- subset(valid.df,select=-c(ClosePrice,const))
y <- train.df$'Competitive'
X <- model.matrix(Competitive ~ ., train.df)[, -2] #remove intercept as glmnet will add intercept
library(glmnet)
# logistic Model
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data=train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
# lasso L1
# Find the best lambda using cross-validation
set.seed(123)
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
modelL1 <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(modelL1)
# ELASTIC NET WITH 0 < ALPHA < 1
a <- seq(0.1, 0.9, 0.05)
library(foreach)
search <- foreach(i = a, .combine = rbind) %dopar% {
cv <- cv.glmnet(X, y, family = "binomial", nfold = 10, type.measure = "deviance", paralle = FALSE,
alpha = i)
data.frame(cvm = cv$cvm[cv$lambda == cv$lambda.1se], lambda.1se = cv$lambda.1se, alpha = i)
}
cv3 <- search[search$cvm == min(search$cvm), ]
cv3
md3 <- glmnet(X, y, family = "binomial", lambda = cv3$lambda.1se, alpha = cv3$alpha)
coef(md3)
coef(modelL1)
library(readr)
train_df <- read_csv("~/206/dmba/framingham_train.csv")
valid_df <- read_csv("~/206/dmba/framingham_valid.csv")
View(train_df)
y <- train.df$'TenYearCHD'
y <- train_df$'TenYearCHD'
X <- model.matrix(TenYearCHD ~ ., train_df)[, -1] #remove intercept as glmnet will add intercept
library(glmnet)
# lasso L1
# Find the best lambda using cross-validation
set.seed(123)
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
modelL1 <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(modelL1)
# ELASTIC NET WITH 0 < ALPHA < 1
a <- seq(0.1, 0.9, 0.05)
library(foreach)
search <- foreach(i = a, .combine = rbind) %dopar% {
cv <- cv.glmnet(X, y, family = "binomial", nfold = 10, type.measure = "deviance", paralle = FALSE,
alpha = i)
data.frame(cvm = cv$cvm[cv$lambda == cv$lambda.1se], lambda.1se = cv$lambda.1se, alpha = i)
}
cv3 <- search[search$cvm == min(search$cvm), ]
cv3
md3 <- glmnet(X, y, family = "binomial", lambda = cv3$lambda.1se, alpha = cv3$alpha)
coef(md3)
